(function () {
	"use strict";
	// Configuration
        // GitHub Issues API base: https://api.github.com/repos/{owner}/{repo}/issues/
        var GITHUB_ISSUES_LINK = "https://api.github.com/repos/sorat0mo/url-short/issues/";
        var PATH_SEGMENTS_TO_SKIP = 0;

        // Only these users' issues are honored
        var OWNERS = ["sorat0mo"];

        // If no status labels (active, disabled, preview-only) are present,
        // fall back to legacy behavior: redirect only when issue.state === "closed".
        var FALLBACK_TO_STATE_WHEN_NO_STATUS_LABELS = true;

        // Utilities, don't change if you don't know what you're doing.
        function isNumeric(num){return!isNaN(num)}function isUrl(url){return/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,24}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)+$/.test(url)}var isQueryPreview=window.location.href.slice(-1)==="?";var pathParts=window.location.pathname.split("/");var keyword=pathParts[PATH_SEGMENTS_TO_SKIP+1]||"";function renderSafeLink(containerId,urlOrMessage){var container=document.getElementById(containerId);if(!container){return}container.textContent="";if(!isUrl(urlOrMessage)){container.textContent=urlOrMessage||"";return}var a=document.createElement("a");a.href=urlOrMessage;a.textContent=urlOrMessage;a.rel="noopener noreferrer";a.target="_blank";container.appendChild(a)}function labelsFrom(issue){var raw=(issue&&issue.labels)?issue.labels:[];var out=[];for(var i=0;i<raw.length;i+=1){var name=raw[i]&&(raw[i].name||raw[i]);if(typeof name==="string"){out.push(name)}}return out}function toLowerSet(arr){var set=new Set();for(var i=0;i<arr.length;i+=1){var s=String(arr[i]||"").trim().toLowerCase();if(s){set.add(s)}}return set}function hasStatusLabels(set){return set.has("active")||set.has("disabled")||set.has("preview-only")}function evaluateIssue(issue){if(!issue||!issue.user||OWNERS.indexOf(issue.user.login)===-1){return{ok:false,message:"Failed authentication (GitHub Issue not created by allowed owner).",url:"",previewOnly:false}}var set=toLowerSet(labelsFrom(issue));var hasLabels=hasStatusLabels(set);if(hasLabels){if(set.has("disabled")){return{ok:false,message:"Link disabled by label.",url:"",previewOnly:false}}var isActive=set.has("active");var previewOnly=set.has("preview-only");if(!isActive){return{ok:false,message:"Link not active (missing 'active' label).",url:"",previewOnly:previewOnly}}var targetUrl=issue.title;return{ok:true,message:"",url:targetUrl,previewOnly:previewOnly}}else{if(FALLBACK_TO_STATE_WHEN_NO_STATUS_LABELS){if(issue.state==="closed"){var targetUrlLegacy=issue.title;return{ok:true,message:"",url:targetUrlLegacy,previewOnly:false}}else{return{ok:false,message:"Issue not closed, not redirecting.",url:"",previewOnly:false}}}else{return{ok:false,message:"Link not active (no status labels present).",url:"",previewOnly:false}}}}function handleResponse(xhr){var issue="";var url="";if(isNumeric(keyword)){if(xhr.status===200){try{issue=JSON.parse(xhr.response)}catch(e){issue=""}}else{issue=""}}else{var listPayload=[];try{listPayload=JSON.parse(xhr.response)}catch(e){listPayload=[]}for(var i=0;i<listPayload.length;i+=1){if(listPayload[i]&&listPayload[i].body===keyword){issue=listPayload[i];break}}}if(issue){var evalResult=evaluateIssue(issue);if(evalResult.ok){url=evalResult.url;var effectivePreview=isQueryPreview||evalResult.previewOnly;renderSafeLink("link",url);if(isUrl(url)){if(!effectivePreview){window.location.replace(url)}if(typeof QRious!=="undefined"){new QRious({element:document.getElementById("qrcode"),value:url,size:200})}}return}else{url=evalResult.message||"Link not available."}}else{url="Slug or issue not found."}renderSafeLink("link",url);if(isUrl(url)&&typeof QRious!=="undefined"){new QRious({element:document.getElementById("qrcode"),value:url,size:200})}}var xhr=new XMLHttpRequest();xhr.onload=function(){try{handleResponse(xhr)}catch(e){renderSafeLink("link","Unexpected error.")}};var apiUrl=GITHUB_ISSUES_LINK;if(isNumeric(keyword)){apiUrl+=keyword}else{apiUrl=apiUrl.slice(0,-1)+"?state=all&per_page=100"}xhr.open("GET",apiUrl);xhr.send()})();
